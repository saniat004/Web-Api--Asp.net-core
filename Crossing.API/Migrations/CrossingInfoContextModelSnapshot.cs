// <auto-generated />
using Crossing.API.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Crossing.API.Migrations
{
    [DbContext(typeof(CrossingInfoContext))]
    partial class CrossingInfoContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Crossing.API.Entities.BorderGates", b =>
                {
                    b.Property<string>("Destination")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<int>("CountryId");

                    b.Property<string>("List")
                        .HasMaxLength(200);

                    b.HasKey("Destination");

                    b.HasIndex("CountryId");

                    b.ToTable("BorderGates");

                    b.HasData(
                        new { Destination = "CAN", CountryId = 1, List = "[USA]" },
                        new { Destination = "USA", CountryId = 2, List = "[CAN]" },
                        new { Destination = "MEX", CountryId = 3, List = "[USA]" },
                        new { Destination = "BLZ", CountryId = 4, List = "[USA , MEX , BLZ ]" },
                        new { Destination = "GTM", CountryId = 5, List = "[USA , MEX , GTM ]" },
                        new { Destination = "SLV", CountryId = 6, List = "[USA , MEX , GTM , SLV ]" },
                        new { Destination = "HND", CountryId = 7, List = "[USA , MEX , GTM , HND ]" },
                        new { Destination = "NIC", CountryId = 8, List = "[USA , MEX , GTM , HND , NIC ]" },
                        new { Destination = "CRI", CountryId = 9, List = "[ USA ,MEX , GTM , HND , NIC , CRI ]" },
                        new { Destination = "PAN", CountryId = 10, List = "[ USA ,MEX , GTM , HND , NIC , CRI , PAN ]" }
                    );
                });

            modelBuilder.Entity("Crossing.API.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new { Id = 1, Name = "CAN" },
                        new { Id = 2, Name = "USA" },
                        new { Id = 3, Name = "MEX" },
                        new { Id = 4, Name = "BLZ" },
                        new { Id = 5, Name = "GTM" },
                        new { Id = 6, Name = "SLV" },
                        new { Id = 7, Name = "HND" },
                        new { Id = 8, Name = "NIC" },
                        new { Id = 9, Name = "CRI" },
                        new { Id = 10, Name = "PAN" }
                    );
                });

            modelBuilder.Entity("Crossing.API.Entities.BorderGates", b =>
                {
                    b.HasOne("Crossing.API.Entities.Country", "Country")
                        .WithMany("BorderGates")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
